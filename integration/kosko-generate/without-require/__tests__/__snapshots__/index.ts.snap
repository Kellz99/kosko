// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when key in the set argument is invalid should print the error 1`] = `
"Failed to override key \\"tolerations[?@.key=='key2'].value\\". Lexical error on line 1. Unrecognized text.
$.tolerations[?@.key=='key2'].valu
--------------^"
`;

exports[`when multiple set arguments are provided should output YAML 1`] = `
"---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: overridden
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx.io/nginx
      tolerations:
        - key: key1
          operator: Equal
          value: value1
          effect: NoSchedule
        - key: key2
          operator: Equal
          value: newValue
          effect: NoExecute
        - key: key3
          operator: Equal
          value: value3
          effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - port: 80"
`;

exports[`when nested value in the set argument is invalid should print the error 1`] = `
"kosko generate [components..]

Generate Kubernetes manifests

Positionals:
  components  Components to generate. This overrides components set in config
              file.                                        [array] [default: []]

Global Options:
      --cwd      Path of working directory               [string] [default: CWD]
      --silent   Disable log output                   [boolean] [default: false]
      --help     Show help                                             [boolean]
      --version  Show version number                                   [boolean]

Options:
  -e, --env       Environment name                                      [string]
  -r, --require   Require modules. Modules set in config file will also be
                  required.                                [array] [default: []]
  -s, --set       Set values on the command line KEY=VAL (can be used multiple
                  times)                                   [array] [default: []]
  -o, --output    Output format
                            [string] [choices: \\"yaml\\", \\"json\\"] [default: \\"yaml\\"]
      --validate  Validate components                  [boolean] [default: true]

Examples:
  kosko generate                      Generate manifests
  kosko generate foo bar              Specify components
  kosko generate foo_*                Use glob pattern
  kosko generate --env foo            Set environment
  kosko generate -r ts-node/register  Require external modules

The specified value \\"3\\" is not a string."
`;

exports[`when output = json should output JSON 1`] = `
"{
  \\"apiVersion\\": \\"v1\\",
  \\"kind\\": \\"List\\",
  \\"items\\": [
    {
      \\"apiVersion\\": \\"apps/v1\\",
      \\"kind\\": \\"Deployment\\",
      \\"metadata\\": {
        \\"name\\": \\"nginx\\",
        \\"labels\\": {
          \\"env\\": \\"dev\\"
        }
      },
      \\"spec\\": {
        \\"replicas\\": 1,
        \\"selector\\": {
          \\"matchLabels\\": {
            \\"app\\": \\"nginx\\"
          }
        },
        \\"template\\": {
          \\"metadata\\": {
            \\"labels\\": {
              \\"app\\": \\"nginx\\"
            }
          },
          \\"spec\\": {
            \\"containers\\": [
              {
                \\"name\\": \\"nginx\\",
                \\"image\\": \\"docker.io/nginx\\"
              }
            ],
            \\"tolerations\\": [
              {
                \\"key\\": \\"key1\\",
                \\"operator\\": \\"Equal\\",
                \\"value\\": \\"value1\\",
                \\"effect\\": \\"NoSchedule\\"
              },
              {
                \\"key\\": \\"key2\\",
                \\"operator\\": \\"Equal\\",
                \\"value\\": \\"value2\\",
                \\"effect\\": \\"NoExecute\\"
              },
              {
                \\"key\\": \\"key3\\",
                \\"operator\\": \\"Equal\\",
                \\"value\\": \\"value3\\",
                \\"effect\\": \\"NoSchedule\\"
              }
            ]
          }
        }
      }
    },
    {
      \\"apiVersion\\": \\"v1\\",
      \\"kind\\": \\"Service\\",
      \\"metadata\\": {
        \\"name\\": \\"nginx\\"
      },
      \\"spec\\": {
        \\"selector\\": {
          \\"app\\": \\"nginx\\"
        },
        \\"ports\\": [
          {
            \\"port\\": 80
          }
        ]
      }
    }
  ]
}"
`;

exports[`when output = yaml should output YAML 1`] = `
"---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    env: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: docker.io/nginx
      tolerations:
        - key: key1
          operator: Equal
          value: value1
          effect: NoSchedule
        - key: key2
          operator: Equal
          value: value2
          effect: NoExecute
        - key: key3
          operator: Equal
          value: value3
          effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - port: 80"
`;

exports[`when output is invalid should print the error 1`] = `
"kosko generate [components..]

Generate Kubernetes manifests

Positionals:
  components  Components to generate. This overrides components set in config
              file.                                        [array] [default: []]

Global Options:
      --cwd      Path of working directory               [string] [default: CWD]
      --silent   Disable log output                   [boolean] [default: false]
      --help     Show help                                             [boolean]
      --version  Show version number                                   [boolean]

Options:
  -e, --env       Environment name                                      [string]
  -r, --require   Require modules. Modules set in config file will also be
                  required.                                [array] [default: []]
  -s, --set       Set values on the command line KEY=VAL (can be used multiple
                  times)                                   [array] [default: []]
  -o, --output    Output format
                            [string] [choices: \\"yaml\\", \\"json\\"] [default: \\"yaml\\"]
      --validate  Validate components                  [boolean] [default: true]

Examples:
  kosko generate                      Generate manifests
  kosko generate foo bar              Specify components
  kosko generate foo_*                Use glob pattern
  kosko generate --env foo            Set environment
  kosko generate -r ts-node/register  Require external modules

Invalid values:
  Argument: output, Given: \\"foo\\", Choices: \\"yaml\\", \\"json\\""
`;

exports[`when output is not set should output YAML 1`] = `
"---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    env: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: docker.io/nginx
      tolerations:
        - key: key1
          operator: Equal
          value: value1
          effect: NoSchedule
        - key: key2
          operator: Equal
          value: value2
          effect: NoExecute
        - key: key3
          operator: Equal
          value: value3
          effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
    - port: 80"
`;

exports[`when value in the set argument is invalid should print the error 1`] = `
"kosko generate [components..]

Generate Kubernetes manifests

Positionals:
  components  Components to generate. This overrides components set in config
              file.                                        [array] [default: []]

Global Options:
      --cwd      Path of working directory               [string] [default: CWD]
      --silent   Disable log output                   [boolean] [default: false]
      --help     Show help                                             [boolean]
      --version  Show version number                                   [boolean]

Options:
  -e, --env       Environment name                                      [string]
  -r, --require   Require modules. Modules set in config file will also be
                  required.                                [array] [default: []]
  -s, --set       Set values on the command line KEY=VAL (can be used multiple
                  times)                                   [array] [default: []]
  -o, --output    Output format
                            [string] [choices: \\"yaml\\", \\"json\\"] [default: \\"yaml\\"]
      --validate  Validate components                  [boolean] [default: true]

Examples:
  kosko generate                      Generate manifests
  kosko generate foo bar              Specify components
  kosko generate foo_*                Use glob pattern
  kosko generate --env foo            Set environment
  kosko generate -r ts-node/register  Require external modules

Cannot parse string \\"image.registry nginx.io\\". Expected format is \\"<key>=<value>\\"."
`;
